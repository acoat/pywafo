'''
Created on 20. nov. 2010

@author: pab
'''
import unittest
import pytest
import numpy as np
from numpy.testing import assert_allclose  # @UnresolvedImport
import wafo.objects as wo
import wafo.kdetools as wk
from wafo.kdetools.tests.data import DATA2D
import scipy


SCIPYVERSION = tuple(int(v) for v in scipy.__version__.split('.')[:2])
XDATA = [-2.9784022156693037, -2.923269270862857, -2.640625797489305,
         -2.592465150170373, -2.5777471766751514, -2.5597898266706323,
         -2.5411937415815604, -2.501753472506631, -2.4939048380402378,
         -2.4747969073957368, -2.3324036659351286, -2.3228634370815,
         -2.230871371173083, -2.21411949373986, -2.2035967461005335,
         -2.1927287694263082, -2.1095391808427064, -2.0942500415622503,
         -2.0774862883018708, -2.0700940505412, -2.054918428555726,
         -1.979624045501378, -1.815804869116454, -1.780636214263252,
         -1.7494324035239686, -1.723149182957688, -1.7180532497996817,
         -1.7016701153705522, -1.6120633534061788, -1.5862592143187193,
         -1.517561220921166, -1.5017798665502253, -1.4895432407186429,
         -1.4470094450898578, -1.4302454657287063, -1.3243060491576388,
         -1.293989140781724, -1.2570066577415648, -1.2332757902347795,
         -1.2306697417054666, -1.0495284321772482, -0.9923351727665026,
         -0.9047559818364217, -0.4092063139968012, -0.3845725606766721,
         -0.30700232234899083, -0.2565844426798063, -0.25415109620097187,
         -0.20223029999069952, -0.10388696244007978, -0.07822191388462896,
         0.07822191388462896, 0.10388696244007978, 0.20223029999069952,
         0.25415109620097187, 0.2565844426798063, 0.30700232234899083,
         0.3845725606766721, 0.4092063139968012, 0.9047559818364217,
         0.9923351727665026, 1.0495284321772482, 1.2306697417054666,
         1.2332757902347795, 1.2570066577415648, 1.293989140781724,
         1.3243060491576388, 1.4302454657287063, 1.4470094450898578,
         1.4895432407186429, 1.5017798665502253, 1.517561220921166,
         1.5862592143187193, 1.6120633534061788, 1.7016701153705522,
         1.7180532497996817, 1.723149182957688, 1.7494324035239686,
         1.780636214263252, 1.815804869116454, 1.979624045501378,
         2.054918428555726, 2.0700940505412, 2.0774862883018708,
         2.0942500415622503, 2.1095391808427064, 2.1927287694263082,
         2.2035967461005335, 2.21411949373986, 2.230871371173083,
         2.3228634370815, 2.3324036659351286, 2.4747969073957368,
         2.4939048380402378, 2.501753472506631, 2.5411937415815604,
         2.5597898266706323, 2.5777471766751514, 2.592465150170373,
         2.640625797489305, 2.923269270862857, 2.9784022156693037]
YDATA = [False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False]


class TestKde(unittest.TestCase):

    def setUp(self):

        # N = 20
        # data = np.random.rayleigh(1, size=(N,))
        self.data = np.array([0.75355792, 0.72779194, 0.94149169, 0.07841119,
                              2.32291887, 1.10419995, 0.77055114, 0.60288273,
                              1.36883635, 1.74754326, 1.09547561, 1.01671133,
                              0.73211143, 0.61891719, 0.75903487, 1.8919469,
                              0.72433808, 1.92973094, 0.44749838, 1.36508452])
        self.x = np.linspace(0, max(self.data) + 1, 10)

    def test_default_bandwidth_and_inc(self):
        kde0 = wk.KDE(self.data, hs=-1, alpha=0.0, inc=None)
        # print(kde0.hs.tolist(), kde0.inc)
        assert_allclose(kde0.hs, 0.19682759537327105)
        assert_allclose(kde0.inc, 64)

    def test0_KDE1D(self):
        data, x = self.data, self.x

        kde0 = wk.KDE(data, hs=0.5, alpha=0.0, inc=16)

        fx = kde0.eval_grid(x)
        assert_allclose(fx, [0.2039735, 0.40252503, 0.54595078,
                             0.52219649, 0.3906213, 0.26381501, 0.16407362,
                             0.08270612, 0.02991145, 0.00720821])

        fx = kde0.eval_points(x)
        assert_allclose(fx, [0.2039735, 0.40252503, 0.54595078,
                             0.52219649, 0.3906213, 0.26381501, 0.16407362,
                             0.08270612, 0.02991145, 0.00720821])

        fx = kde0.eval_grid(x, r=1)
        assert_allclose(fx, [-0.11911419724002906, -0.13440000694772541,
                             -0.044400116190638696, 0.0677695267531197,
                             0.09555596523854318, 0.07498819087690148,
                             0.06167607128369182, 0.04678588231996062,
                             0.024515979196411814, 0.008022010381009501])

        fx = kde0.eval_grid(x, r=2)
        assert_allclose(fx, [0.08728138131197069, 0.07558648034784508,
                             0.05093715852686607, 0.07908624791267539,
                             0.10495675573359599, 0.07916167222333347,
                             0.048168330179460386, 0.03438361415806721,
                             0.02197927811015286, 0.009222988165160621])

        ffx = kde0.eval_grid_fast(x)
        assert_allclose(ffx, [0.20729484, 0.39865044, 0.53716945, 0.5169322,
                              0.39060223, 0.26441126, 0.16388801, 0.08388527,
                              0.03227164, 0.00883579], 1e-6)

        fx = kde0.eval_grid_fast(x, r=1)
        assert_allclose(fx, [-0.11582450668441863, -0.12901768780183628,
                             -0.04402464127812092, 0.0636190549560749,
                             0.09345144501310157, 0.07573621607126926,
                             0.06149475587201987, 0.04550210608639078,
                             0.024427027615689087, 0.00885576504750473])

        fx = kde0.eval_grid_fast(x, r=2)
        assert_allclose(fx, [0.08499284131672676, 0.07572564161758065,
                             0.05329987919556978, 0.07849796347259348,
                             0.10232741197885842, 0.07869015379158453,
                             0.049431823916945394, 0.034527256372343613,
                             0.021517998409663567, 0.009527401063843402])

        f = kde0.eval_grid_fast()
        assert_allclose(np.trapz(f, kde0.args),  0.995001)
        assert_allclose(f, [0.011494108953097538, 0.0348546729842836,
                            0.08799292403553607, 0.18568717590587996,
                            0.32473136104523725, 0.46543163412700084,
                            0.5453201564089711, 0.5300582814373698,
                            0.44447650672207173, 0.3411961246641896,
                            0.25103852230993573, 0.17549519961525845,
                            0.11072988772879173, 0.05992730870218242,
                            0.02687783924833738, 0.00974982785617795])

    def test1_TKDE1D(self):
        data = self.data
        x = np.linspace(0.01, max(data) + 1, 10)
        kde = wk.TKDE(data, hs=0.5, L2=0.5)
        f = kde(x)
        assert_allclose(f, [1.03982714,  0.45839018,  0.39514782,  0.32860602,
                            0.26433318, 0.20717946,  0.15907684,  0.1201074,
                            0.08941027,  0.06574882])
        f = kde.eval_points(x)
        assert_allclose(f, [1.03982714,  0.45839018,  0.39514782,  0.32860602,
                            0.26433318, 0.20717946,  0.15907684,  0.1201074,
                            0.08941027,  0.06574882])
        f = kde.eval_grid(x)
        assert_allclose(f, [1.03982714,  0.45839018,  0.39514782,  0.32860602,
                            0.26433318, 0.20717946,  0.15907684,  0.1201074,
                            0.08941027,  0.06574882])
        assert_allclose(np.trapz(f, x), 0.94787730659349068)
        f = kde.eval_grid_fast(x)
        assert_allclose(f, [1.0401892415290148, 0.45838973393693677,
                            0.39514689240671547, 0.32860531818532457,
                            0.2643330110605783, 0.20717975528556506,
                            0.15907696844388747, 0.12010770443337843,
                            0.08941129458260941, 0.06574899139165799])
        assert_allclose(np.trapz(f, x), 0.9479438058416647)

    def test1_KDE1D(self):
        data, x = self.data, self.x
        kde = wk.KDE(data, hs=0.5)
        f = kde(x)
        assert_allclose(f, [0.2039735,  0.40252503,  0.54595078,  0.52219649,
                            0.3906213, 0.26381501,  0.16407362,  0.08270612,
                            0.02991145, 0.00720821])

        assert_allclose(np.trapz(f, x), 0.92576174424281876)

    def test2_KDE1D(self):
        # data, x = self.data, self.x

        data = np.asarray([1, 2])
        x = np.linspace(0, max(np.ravel(data)) + 1, 10)
        kde = wk.KDE(data, hs=0.5)
        f = kde(x)
        assert_allclose(f, [0.0541248,  0.16555235,  0.33084399,  0.45293325,
                            0.48345808, 0.48345808,  0.45293325,  0.33084399,
                            0.16555235,  0.0541248])

        assert_allclose(np.trapz(f, x), 0.97323338046725172)
        f0 = kde(output='plot')
        self.assertIsInstance(f0, wo.PlotData)
        assert_allclose(np.trapz(f0.data, f0.args), 0.9319800260106625)

        f0 = kde.eval_grid_fast(output='plot')
        self.assertIsInstance(f0, wo.PlotData)
        assert_allclose(np.trapz(f0.data, f0.args), 0.9319799696210691)


    def test1a_KDE1D(self):
        data, x = self.data, self.x
        kde = wk.KDE(data, hs=0.5, alpha=0.5)
        f = kde(x)
        assert_allclose(f, [0.17252055,  0.41014271,  0.61349072,  0.57023834,
                            0.37198073, 0.21409279,  0.12738463,  0.07460326,
                            0.03956191,  0.01887164])

        assert_allclose(np.trapz(f, x), 0.92938023659047952)

        f0 = kde(output='plot')
        self.assertIsInstance(f0, wo.PlotData)
        assert_allclose(np.trapz(f0.data, f0.args), 0.9871189376720593)

        f0 = kde.eval_grid_fast(output='plot')
        self.assertIsInstance(f0, wo.PlotData)
        assert_allclose(np.trapz(f0.data, f0.args), 0.9962507385131669)

    def test2a_KDE_1D_hs_5_alpha_5(self):
        # data, x = self.data, self.x
        data = np.asarray([1, 2])
        x = np.linspace(0, max(np.ravel(data)) + 1, 10)
        kde = wk.KDE(data, hs=0.5, alpha=0.5)
        f = kde(x)
        assert_allclose(f, [0.0541248,  0.16555235,  0.33084399,  0.45293325,
                            0.48345808, 0.48345808,  0.45293325,  0.33084399,
                            0.16555235,  0.0541248])

        assert_allclose(np.trapz(f, x), 0.97323338046725172)

    def test_KDE2D(self):
        # N = 20
        # data = np.random.rayleigh(1, size=(2, N))
        data = DATA2D
        x = np.linspace(0, max(np.ravel(data)) + 1, 3)

        kde0 = wk.KDE(data, hs=0.5, alpha=0.0, inc=512)
        assert_allclose(kde0.eval_grid(x, x),
                        [[3.27260963e-02, 4.21654678e-02, 5.85338634e-04],
                         [6.78845466e-02, 1.42195839e-01, 1.41676003e-03],
                         [1.39466746e-04, 4.26983850e-03, 2.52736185e-05]])

        f0 = kde0.eval_grid_fast(x, x, output='plot')
        t = [[0.0443506097653615, 0.06433530873456418, 0.0041353838654317856],
             [0.07218297149063724, 0.1235819591878892, 0.009288890372002473],
             [0.001613328022214066, 0.00794857884864038, 0.0005874786787715641]
             ]
        assert_allclose(f0.data, t)

    def test_2d_default_bandwidth(self):
        # N = 20
        # data = np.random.rayleigh(1, size=(2, N))
        data = DATA2D
        kde0 = wk.KDE(data, kernel=wk.Kernel('epan', 'hmns'), inc=512)

        assert_allclose(kde0.hs, [[0.8838122391117693, 0.08341940479019105],
                                  [0.08341940479019104, 0.7678179747855731]])
        self.assertRaises(ValueError, kde0.eval_points, [1, 2, 3])
        assert_allclose(kde0.eval_points([1, 2]), 0.11329600006973661)


class TestRegression(unittest.TestCase):
    def test_k_regression(self):

        N = 51
        x = np.linspace(0, 1, N)
        # ei = np.random.normal(loc=0, scale=0.075, size=(N,))
        ei = [0.0514233500271586, 0.00165101982431131, 0.042827107319028994,
              -0.084351702283385, 0.05978024392552100, -0.07121894535738457,
              0.0855578119920183, -0.0061865198365448, 0.060986773136137415,
              0.0467717713275598, -0.0852368434029634, 0.09790798995780517,
              -0.174003547831554, 0.1100349974247687, 0.12934695904976257,
              -0.036688944487546, -0.0279545148054110, 0.09660222791922815,
              -0.108463847524115, -0.0635162550551463, 0.017192887741329627,
              -0.031520480101878, 0.03939880367791403, -0.06343921941793985,
              0.0574763321274059, -0.1186005160931940, 0.023007133904660495,
              0.0572646924609536, -0.0334012844057809, -0.03444460758658313,
              0.0325434547422866, 0.06063111859444784, 0.0010264474321885913,
              -0.162288671571205, 0.01334616853351956, -0.020490428895193084,
              0.0446047497979159, 0.02924587567502737, 0.021177586536616458,
              0.0634083218094540, -0.1506377646036794, -0.03214553797245153,
              0.1850745187671265, -0.0151240946088902, -0.10599562843454335,
              0.0317357805015679, -0.0736187558312158, 0.04791463883941161,
              0.0660021138871709, -0.1049359954387588, 0.0034961490852392463]
        # print(ei.tolist())
        y0 = 2 * np.exp(-x**2 / (2 * 0.3**2)) + 3 * \
            np.exp(-(x - 1)**2 / (2 * 0.7**2))
        y = y0 + ei
        kreg = wk.KRegression(x, y)
        f = kreg(output='plotobj', title='Kernel regression', plotflag=1)

        kreg.p = 1
        f1 = kreg(output='plot', title='Kernel regression', plotflag=1)

#         import matplotlib.pyplot as plt
#         plt.figure(0)
#         f.plot(label='p=0')
#         f1.plot(label='p=1')
#         # print(f1.data)
#         plt.plot(x, y, '.', label='data')
#         plt.plot(x, y0, 'k', label='True model')
#         plt.legend()
#         plt.show('hold')

        assert_allclose(f.data[::5],
                        [3.14313544673463, 3.14582567119112, 3.149199078830904,
                         3.153335095194225, 3.15813722171621, 3.16302709623568,
                         3.16631430398602, 3.164138775969285, 3.14947062082316,
                         3.11341295908516, 3.05213808272656, 2.976097561057097,
                         2.908020176929025, 2.867826513276857, 2.8615179445705,
                         2.88155232529645, 2.91307482047679, 2.942469210090470,
                         2.96350144269953, 2.976399025328952, 2.9836554385038,
                         2.987516554300354, 2.9894470264681, 2.990311688080114,
                         2.9906144224522406, 2.9906534916935743])

        # print(f1.data[::5].tolist())
        assert_allclose(f1.data[::5],
                        [2.7832831899382, 2.83222307174095, 2.891112685251379,
                         2.9588984473431, 3.03155510969298, 3.1012027219652127,
                         3.1565263737763, 3.18517573180120, 3.177939796091202,
                         3.13336188049535, 3.06057968378847, 2.978164236442354,
                         2.9082732327128, 2.867790922237915, 2.861643209932334,
                         2.88347067948676, 2.92123931823944, 2.96263190368498,
                         2.9985444322015, 3.0243198029657, 3.038629147365635,
                         3.04171702362464, 3.03475567689171, 3.020239732466334,
                         3.002434232424511, 2.987257365211814])

    @pytest.mark.skipif(SCIPYVERSION<(1,3),
                        reason="Unstable test. Skipping for python 3.5 and scipy 1.1.")
    def test_bk_regression_with_beta(self):
        global XDATA, YDATA
        bkreg = wk.BKRegression(XDATA, YDATA, a=0.05, b=0.05, hs_e=0.33140803)
        # print(bkreg.hs_e)

        fbest = bkreg.prb_search_best(hsfun='hste', alpha=0.05, color='g')

        print(fbest.data[::10].tolist())
        score = fbest.score.data.tolist()
        hs = fbest.hs.tolist()
        # print(score)
        # print(hs)
        truth = [8.288052022525543e-17, 6.467470785160458e-17, 1.7762703232931328e-17, 0.0, 1.1175588343682177e-16, 1.1856000708271898e-13, 4.8327815314193965e-11, 1.019611394387776e-08, 1.0251349844021577e-06, 4.264591854871683e-05, 0.0008514687523433396, 0.00919426596957344, 0.05501961404353164, 0.18729865349891328, 0.44789470046124336, 0.8659316673414831, 0.9914888642824607, 0.9996518793705619, 0.9999903801533727, 0.9999903801533725, 0.9996518793705619, 0.9914888642824613, 0.865931667341485, 0.44789470046124524, 0.1872986534989137, 0.055019614043531694, 0.009194265969573491, 0.0008514687523433715, 4.264591854871559e-05, 1.025134984402249e-06, 1.0196113947170725e-08, 4.832782404903089e-11, 1.1860349438401879e-13, 6.037616600701264e-17, 0.0, 1.5203669716322612e-17, 0.0, 0.0]

        truescore = [41622.23676564823, 36395.01646696339, 6220.123988861956, 47050.77278133661, 37815.54822669753, 20635.596126724387, 15105.874493049976, 19646.62527374109, 29786.92591405318, 17575.590435000646, 14816.388419050902, 30726.090375114676, 24237.028495747316, 35178.29480463215, 26203.1164484096, 21612.942219305998, 17666.6681374814, 21709.933568691424, 16081.755131309861, 20469.16256300024, 19264.346129769918, 20900.48127986247, 6409.342345424054, 6485.007538273512, 6466.709921475774, 14293.73265046957, 15840.552637563183, 13855.9320695519, 8432.890817403872, 10195.214948849045, 14225.890135454663, 5312.45091940059, 10993.513749869533, 5600.165342924938, 9043.347699064414, 9350.983529722893, 5354.316690059941, 6220.021253437557, 6154.590666910095, 6188.623741758889, 5956.812014277398, 6045.819290538599, 6418.390790579977, 6450.111010384022, 6497.28598031042, 6554.747127169262, 6596.457485540424, 6675.626835135936, 6738.9736786745925, 6803.844317552503, 6870.298106943677, 6938.403252331078, 7008.307295689638, 7079.985054384406, 7153.508116135097]

        truehs = 0.2043682851666667

        assert hs == pytest.approx(truehs, rel=1e-1)
        assert_allclose(score, truescore, rtol=1e-1)
        assert_allclose(fbest.data[::10], truth , rtol=1e-2, atol=1e-4)

    def test_bk_regression_empirical(self):
        global XDATA, YDATA
        bkreg = wk.BKRegression(XDATA, YDATA, method='wilson')

        prb_e = bkreg.prb_empirical(alpha=0.05)
        print(prb_e.data[10:-10].tolist())
        print(prb_e.args.ravel()[10:-10].tolist())
        true_tprb_e = [0.0, 0.0, 0.0, 0.5068370416969658, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5068370416969631, 0.0, 0.0, 0.0]
        true_tprb_e_x = [-1.4710267742304424, -1.287148427451637, -1.1032700806728317, -0.9193917338940265, -0.7355133871152209, -0.5516350403364156, -0.3677566935576104, -0.1838783467788052, 0.0, 0.18387834677880566, 0.36775669355761087, 0.5516350403364161, 0.7355133871152217, 0.9193917338940265, 1.1032700806728322, 1.2871484274516378, 1.4710267742304426]

        assert_allclose(prb_e.data[10:-10], true_tprb_e)
        assert_allclose(prb_e.args.ravel()[10:-10], true_tprb_e_x)

        prb_s = bkreg.prb_smoothed(prb_e, 0.72)
        print(prb_s.data[::10].tolist())
        truth = [0.00046534573451870246, 0.0008211551575028886, 0.0014373128508957964, 0.002494531474529822, 0.004290416469982636, 0.007307212623105813, 0.012311147719779397, 0.02048977307665743, 0.03362350522922616, 0.054257913598390994, 0.08577632634077768, 0.13215517470695637, 0.1970586336732946, 0.28198756468594455, 0.3837886612978354, 0.4929678141427555, 0.5947585454583219, 0.6731907667222461, 0.7156972370715711, 0.7156972370715708, 0.6731907667222452, 0.5947585454583199, 0.49296781414275354, 0.3837886612978331, 0.2819875646859424, 0.19705863367329274, 0.13215517470695493, 0.08577632634077662, 0.054257913598390155, 0.0336235052292256, 0.02048977307665702, 0.0123111477197791, 0.007307212623105654, 0.004290416469982478, 0.0024945314745297743, 0.0014373128508957482, 0.0008211551575028447, 0.0004653457345187116]

        assert_allclose(prb_s.data[::10][13:], truth[13:])

    @pytest.mark.skip  # Wilson method is unstable and gives different result on different machines.
    def test_bk_regression_with_wilson(self):
        global XDATA, YDATA
        bkreg = wk.BKRegression(XDATA, YDATA, method='wilson')
        fbest = bkreg.prb_search_best(hsfun='hste', alpha=0.05, color='g')
        score = fbest.score.data.tolist()
        hs = fbest.hs.tolist()
        # print(score)
        print(hs)
        x = fbest.score.args.ravel().tolist()
        # print(x)
        true_score = [70264.98913673757, 79485.27187312284, 52115.6036259286, 51181.84064152534, 27627.948627450376, 39293.321457632046, 48306.77954048321, 59950.001236073396, 109415.06765627922, 124196.2839041708, 93185.7413927379, 121761.13503783672, 140790.6682575987, 136917.23728413312, 169139.3201298805, 160478.72869914692, 187384.91530799554, 204663.49756319966, 229234.02784286902, 237289.68787823746, 248765.00505889987, 263422.09028058837, 295116.0491074402, 286801.65038687194, 306283.7366029765, 328511.1795126467, 353609.36377238564, 355948.9275937855, 366120.68784949754, 379570.2960667178, 402367.7995494029, 407941.2974613215, 427676.3076269373, 446163.0250985027, 454974.63321235974, 471478.0620289999, 483657.0038336324, 498372.4685033615, 511732.34852451197, 529399.4850641354, 541524.62931021, 552828.5552580808, 568949.1356118141, 584848.8148275309, 601185.7012318124, 614921.9428812155, 626327.1607127315, 641081.9571354779, 657531.3899661598, 671212.118985575, 687751.747434233, 699728.8500993064, 716680.6647774944, 731421.2021274817, 749769.3124353285]

        true_x = [0.03314080263491917, 0.038664269740739034, 0.04418773684655889, 0.049711203952378755, 0.05523467105819861, 0.060758138164018476, 0.06628160526983834, 0.0718050723756582, 0.07732853948147805, 0.08285200658729792, 0.08837547369311778, 0.09389894079893765, 0.09942240790475751, 0.10494587501057737, 0.11046934211639722, 0.1159928092222171, 0.12151627632803695, 0.12703974343385682, 0.13256321053967668, 0.13808667764549654, 0.1436101447513164, 0.14913361185713625, 0.1546570789629561, 0.160180546068776, 0.16570401317459585, 0.1712274802804157, 0.17675094738623556, 0.18227441449205542, 0.18779788159787528, 0.19332134870369516, 0.19884481580951502, 0.20436828291533488, 0.20989175002115473, 0.2154152171269746, 0.22093868423279445, 0.2264621513386143, 0.2319856184444342, 0.23750908555025405, 0.2430325526560739, 0.24855601976189376, 0.25407948686771364, 0.2596029539735335, 0.26512642107935336, 0.2706498881851732, 0.27617335529099307, 0.28169682239681293, 0.2872202895026328, 0.29274375660845264, 0.2982672237142725, 0.30379069082009236, 0.3093141579259122, 0.31483762503173207, 0.32036109213755193, 0.3258845592433718, 0.3314080263491917]

        assert_allclose(x, true_x)
        assert_allclose(score, true_score)
        assert_allclose(hs, 0.05523467105819861)
        # print(fbest.data[::10].tolist())
        rtol = 6e-2 if SCIPYVERSION < (1, 3) else 1e-7

        # truth = [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.5601311219614983e-17, 2.130354199771828e-09, 0.0006689663809779967, 0.24691492972829443, 0.9132767047314845, 0.9998419777071581, 0.9999999999998436, 1.0, 1.0, 1.0000000000000004, 0.9999999999999999, 0.9999999999998432, 0.9998419777071702, 0.9132767047314807, 0.2469149297282834, 0.0006689663809778622, 2.1303541150096722e-09, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
        truth = [0.0, 0.0, 3.3840823413810475e-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2047456866703477e-17, 1.6759316303718756e-14, 1.6630722546315143e-05, 0.19738507290116047, 0.9820106163748646, 0.9999991987020067, 1.0, 0.9999999999999999, 1.0, 1.0, 1.0, 0.9999999999999999, 0.9999991987013542, 0.9820106163748648, 0.19738507290115023, 1.663072254616563e-05, 1.6708126240962134e-14, 2.004314260609393e-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

        assert_allclose(fbest.data[::10][13:], truth[13:], rtol=rtol, atol=1e-7)


# from wafo.kdetools.kdetools import _get_data
# n = 51
# loc1 = 0.1
# scale1 = 0.6
# scale2 = 0.75
# XDATA, YDATA, fun1 = _get_data(n, symmetric=True, loc1=loc1,
#                       scale1=scale1, scale2=scale2)
# print(XDATA.tolist())
# print(YDATA.tolist())
# dist = st.norm
#  norm1 = scale2 * (dist.pdf(-loc1, loc=-loc1, scale=scale1) +
#                    dist.pdf(-loc1, loc=loc1, scale=scale1))
#  def fun1(XDATA):
#      return (((dist.pdf(XDATA, loc=-loc1, scale=scale1) +
#               dist.pdf(XDATA, loc=loc1, scale=scale1)) /
#               norm1).clip(max=1.0))


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
